[Territories, TerrStatus, Units, context, orderData] - list of data we need to create board/order
    Territories - from wD_Territories
    TerrStatus - from wD_TerrStatus
    Units - from wD_Units
    context - from wD_Games + wD_Members
    orderData - from wD_Orders

## Assume react app will be loaded into fresh page with no access to the data from original page,
## we need general game data(context datas derive from this) before load in any board/order related data.


Below is the current steps to create game board and order

1. User visit the game page with param gameID

2. board.php receives gameID and create a $Game object.
    - $Game object is an instance of processGame which is subclass of Game.
      This object contains all essential data/methods related to current game(Not include game board specific data i.e. territories,units and orders)
    - at this point, we need $Game, $User, and $Member
    - Assume $User data will be available after auth.

3. With $Game, $User, and $Member data, generates context which includes
    ['gameID','userID','memberID','variantID','turn','phase','countryID','tokenExpireTime','maxOrderID']

    - board/orders/orderInterface.php line 318 - jsContextVars()
    - jsContextVars() query orders data as well - line 113 - 143 ["SELECT id, type, unitID, toTerrID, fromTerrID, viaConvoy
			FROM wD_Orders WHERE gameID = ".$this->gameID." AND countryID=".$this->countryID]
    - at this point, we have context and ordersData

4. Time to load board. this happens in board/orders/orderInterface.php line 319. Below are the steps.
    A. loadTerritories - variants/Classic/install.php line 41 - 91
        - query all DEFAULT territory data.
        - query the data and creates a function loadTerritories() which will be called(board/orders/orderInterface.php line 296)
          to return Territories data.(They also cache this {variants/Classic/cache/territories.js})
    B. loadBoardTurnData - board/orders/jsonBoardData.php
        - query both Units and TerrStatus data.
        - creates a function loadBoardTurnData() which will be called(board/orders/orderInterface.php line 296).
    C. loadModel - javascript/board/model.js
        - load all necessary models which board data will be loaded into
        - Basically a game logic.
    D. loadBoard - javascript/board/load.js
        - this will create instances of above models and load the board data into them.
        - at this point, we have a fully generated game board which contains all data to draw out the board(territories, units, supply centers etc.)    
    E. loadOrdersModel - javascript/orders/order.js
        - load Order class which contains order's data
        - generate/validate order(move) for each units.

    ## Below steps are mostly about form manipulation/submission. We don't need this.

    F. loadOrdersForm - javascript/orders/form.js
        - handles order submission
    G. loadOrdersPhase - javascript/orders/{phase specific file}
        - extends the order class for each phases.
        - Basically check/manipulate the form to have specific move type for each phases
        - We can handle this from Order Class itself.

5. Ready to play the game.
